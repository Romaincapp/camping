import React, { useState } from 'react';
import { Calendar } from 'lucide-react';

const CalendarDay = ({ date, isSelected, isStart, isEnd, onClick, isDisabled }) => {
  const baseClasses = "w-8 h-8 flex items-center justify-center rounded-full cursor-pointer";
  const selectedClasses = isSelected ? "bg-blue-500 text-white" : "";
  const rangeClasses = isStart ? "rounded-l-full" : isEnd ? "rounded-r-full" : "";
  const disabledClasses = isDisabled ? "text-gray-300 cursor-not-allowed" : "hover:bg-blue-100";

  return (
    <div 
      className={`${baseClasses} ${selectedClasses} ${rangeClasses} ${disabledClasses}`}
      onClick={() => !isDisabled && onClick(date)}
    >
      {date.getDate()}
    </div>
  );
};

const MonthCalendar = ({ year, month, selectedDates, onDateSelect }) => {
  const monthNames = [
    "Janvier", "Février", "Mars", "Avril", "Mai", "Juin",
    "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"
  ];
  const dayNames = ["Dim", "Lun", "Mar", "Mer", "Jeu", "Ven", "Sam"];

  const firstDay = new Date(year, month, 1);
  const lastDay = new Date(year, month + 1, 0);
  const daysInMonth = lastDay.getDate();
  const startingDay = firstDay.getDay();

  const today = new Date();
  today.setHours(0, 0, 0, 0);

  const isDateSelected = (date) => {
    return selectedDates.some(selectedDate => 
      selectedDate && date.getTime() === new Date(selectedDate).getTime()
    );
  };

  const isDateDisabled = (date) => {
    return date < today;
  };

  const weeks = [];
  let currentWeek = [];
  
  // Remplir les jours vides au début
  for (let i = 0; i < startingDay; i++) {
    currentWeek.push(null);
  }

  // Remplir les jours du mois
  for (let day = 1; day <= daysInMonth; day++) {
    const date = new Date(year, month, day);
    currentWeek.push(date);

    if (currentWeek.length === 7) {
      weeks.push(currentWeek);
      currentWeek = [];
    }
  }

  // Remplir les jours vides à la fin
  if (currentWeek.length > 0) {
    while (currentWeek.length < 7) {
      currentWeek.push(null);
    }
    weeks.push(currentWeek);
  }

  return (
    <div className="p-4">
      <div className="text-center font-semibold mb-4">
        {monthNames[month]} {year}
      </div>
      <div className="grid grid-cols-7 gap-1">
        {dayNames.map(day => (
          <div key={day} className="text-center text-sm font-medium text-gray-500">
            {day}
          </div>
        ))}
        {weeks.map((week, weekIndex) => (
          week.map((date, dayIndex) => (
            <div key={`${weekIndex}-${dayIndex}`} className="text-center">
              {date ? (
                <CalendarDay
                  date={date}
                  isSelected={isDateSelected(date)}
                  isDisabled={isDateDisabled(date)}
                  onClick={onDateSelect}
                />
              ) : (
                <div className="w-8 h-8" />
              )}
            </div>
          ))
        ))}
      </div>
    </div>
  );
};

const CampingReservation = () => {
  const [selectedDates, setSelectedDates] = useState([]);
  const [adults, setAdults] = useState(1);
  const [children, setChildren] = useState(0);
  const [message, setMessage] = useState('');
  const [totalPrice, setTotalPrice] = useState(0);

  const today = new Date();
  const nextMonth = new Date(today.getFullYear(), today.getMonth() + 1, 1);

  const handleDateSelect = (date) => {
    let newDates;
    if (selectedDates.length === 0 || selectedDates.length === 2) {
      newDates = [date];
    } else {
      const firstDate = new Date(selectedDates[0]);
      if (date < firstDate) {
        newDates = [date, firstDate];
      } else {
        newDates = [firstDate, date];
      }
    }
    setSelectedDates(newDates);
    if (newDates.length === 2) {
      setTotalPrice(calculatePrice(newDates, adults, children));
    }
  };

  const calculatePrice = (dates, numAdults, numChildren) => {
    if (dates.length !== 2) return 0;

    const startDate = new Date(dates[0]);
    const endDate = new Date(dates[1]);
    const numberOfNights = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));

    const month = startDate.getMonth() + 1;
    const isHighSeason = month >= 4 && month <= 11;

    let price = 0;
    if (isHighSeason) {
      price = (numAdults * 19 + numChildren * 13) * numberOfNights;
    } else {
      price = (19 + (numAdults - 1 + numChildren) * 10) * numberOfNights;
    }

    return price;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Formulaire soumis', {
      selectedDates,
      adults,
      children,
      message,
      totalPrice
    });
  };

  return (
    <div className="max-w-3xl mx-auto bg-white rounded-lg shadow-lg">
      <div className="p-6">
        <h2 className="text-2xl font-bold text-center mb-6">Réservation Camping</h2>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">
              Dates de séjour
            </label>
            <div className="border rounded-lg">
              <div className="flex flex-wrap justify-center gap-4">
                <MonthCalendar
                  year={today.getFullYear()}
                  month={today.getMonth()}
                  selectedDates={selectedDates}
                  onDateSelect={handleDateSelect}
                />
                <MonthCalendar
                  year={nextMonth.getFullYear()}
                  month={nextMonth.getMonth()}
                  selectedDates={selectedDates}
                  onDateSelect={handleDateSelect}
                />
              </div>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Nombre d'adultes
              </label>
              <input
                type="number"
                min="1"
                value={adults}
                onChange={(e) => {
                  const newAdults = parseInt(e.target.value);
                  setAdults(newAdults);
                  if (selectedDates.length === 2) {
                    setTotalPrice(calculatePrice(selectedDates, newAdults, children));
                  }
                }}
                className="w-full p-2 border rounded"
              />
            </div>
            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Nombre d'enfants
              </label>
              <input
                type="number"
                min="0"
                value={children}
                onChange={(e) => {
                  const newChildren = parseInt(e.target.value);
                  setChildren(newChildren);
                  if (selectedDates.length === 2) {
                    setTotalPrice(calculatePrice(selectedDates, adults, newChildren));
                  }
                }}
                className="w-full p-2 border rounded"
              />
            </div>
          </div>

          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">
              Message (optionnel)
            </label>
            <textarea
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              className="w-full h-24 p-2 border rounded"
            />
          </div>

          <div className="bg-gray-100 p-4 rounded-lg">
            <p className="text-lg font-semibold">Total estimé : {totalPrice}€</p>
            <p className="text-sm text-gray-600 mt-2">
              Haute saison (avril à novembre) : 19€/adulte et 13€/enfant<br />
              Basse saison : 19€ premier adulte et 10€/personne supplémentaire
            </p>
          </div>

          <button
            type="submit"
            className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors"
          >
            Envoyer la demande
          </button>
          
          <p className="text-sm text-gray-500 italic">
            Note : L'envoi de cette demande est à titre de renseignement et doit être validé 
            par notre équipe avant de faire office de réservation officielle.
          </p>
        </form>
      </div>
    </div>
  );
};

export default CampingReservation;
